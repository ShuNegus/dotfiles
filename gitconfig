[user]
	name = Vladimir Shutov
	email = v@smd.su

[alias]

    # Short status output, just give me the good stuff.
    st = status -s

    # Hard-coded into my fingers from RCS days...
    co = checkout
    ci = commit

    # Smooth over git's dumb command names.
    branches = branch -a
    tags = tag -l
    stashes = stash list
    remotes = remote -v

    # Unstage anything staged right now.
    unstage = reset -q HEAD --

    # Throw out any modifications to tracked files.
    discard = checkout --

    # Pretend that last commit was never committed.
    uncommit = reset --mixed HEAD~

    # Update commit message on current commit.
    amend = commit --amend

    # Show me a graph or what's been going on recently; last 10 commits
    graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Cresetâ€¢ %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order

    # To run before a commit, see what is about to be committed.
    precommit = diff --cached --diff-algorithm=minimal -w

    # NOTE: can use -M to detect moves, so you don't get an entire
    # file of `-` and then a file of `+`.
    # git diff --staged -M

    # Pretty log output with lot of info
    # also use "lg -p" to see it with patches for each commit.
    lg  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --decorate=full

    # See the pretty log output but include the name/status of changed paths.
    lgv = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --decorate=full --name-status

    # Another variant showing default log output, but with file info.
    logv = log --name-status

    # Not yet added - doesn't include ignored files
    new = ls-files --others --exclude-standard

    # Files that are in the staging area
    added = diff --cached --name-only

    # Git log of last 24 hours
    today = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative

    # Fast-forward; does nothing if fast-forward not possible.
    ff = merge --ff-only

    # Pull all submodules (not recursive!)
    pullsubs = submodule foreach git pull origin master

    # Which tag am I on, or the nearest ancestor?
    # `git describe` might also be an option here.
    whichtag = !git name-rev --tags --name-only $(git rev-parse HEAD)

    # List (local) branches sorted by date of last commit
    branchesbydate = !git for-each-ref --sort='-committerdate' --format='%(committerdate)  %(refname)' refs/heads | sed -e 's,refs/heads/,,'

    # Show file create/remove changes in the diff
    filechanges = diff --summary

    # Diff with word-diff
    wdiff = diff --word-diff

    # Show SHA of HEAD, or of passed ref
    id   = log --pretty=format:'%H' -n 1
    hash = log --pretty=format:'%H' -n 1

[core]
    pager = less
    editor = nano
    quotepath = false
	excludesfile = /Users/negus/.dotfiles/gitignore

[color]
    branch = auto
    diff = auto
    interactive = auto
    status = auto
    ui = auto

[github]
    user = ShuNegus

[diff]
    # For Github-style word diffs
    wordRegex = [^[:space:]]
    tool = Kaleidoscope

[help]
    autocorrect = 1

[push]
    # Push current branch even if you've never pushed it before
    default = current

[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true

[mergetool "Kaleidoscope"]
    cmd = /usr/local/bin/ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustexitcode = true

[merge]
    tool = Kaleidoscope

[difftool "Kaleidoscope"]
    cmd = /usr/local/bin/ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[difftool]
    prompt = false

[mergetool]
    prompt = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]
	template = /Users/negus/.stCommitMsg
